html
  include includes/head.pug
  script(src='/socket.io/socket.io.js')
  link(rel='stylesheet', type='text/css', href='css/lobby.css')
  script.
    'use strict';
    window.document.addEventListener('DOMContentLoaded', function () {

      // web socket stuff
      //var socket = io('http://localhost:8080/');
      var socket = io('https://cubekatraz.herokuapp.com/');

      socket.on('connect', function () {
        console.log('Navigateur dit : Connecté au serveur');

        var tchatForm = document.getElementById('tchatForm');
        var antichamberEntrance = document.getElementById('AntichamberAdder');
        var avatarSelector1 = document.getElementById('player1AvatarSelect');
        var avatarSelector2 = document.getElementById('player2AvatarSelect');
        var antichamberStatus = document.getElementById('antichamberStatus');
        var connected = document.getElementById('connectedChild');
        var matches = document.getElementById('matchChild');
        var chat = document.getElementById('chatChild');
        var avatarPlayer1 = document.getElementById('avatarPlayer1');
        var avatarPlayer2 = document.getElementById('avatarPlayer2');
        var slot1 = document.getElementById('player1InAntichamber');
        var slot2 = document.getElementById('player2InAntichamber');
        var evasionCountDown = document.getElementById('evasionCountDown');
        var parentChat = chat.parentNode;
        var parentConnected = connected.parentNode;
        var parentMatches = matches.parentNode;
        var outOfAutoScroll = false;
        var playerList = [];
        var instancesList = [];
        var yourUserName = '!{message}';
        var updateSlots = function (slot) {
          if (slot.status === 'empty') {
            slot.status = 'vide';
          } else {
            for (var i=0; i < playerList.length; i++) {
              if (playerList[i].id === slot.status) {
                if (slot.slotName === 'slot1') {
                  slot1.text = playerList[i].name; 
                } else {
                  slot2.text = playerList[i].name;
                }
              }
            }
          }
        }

        // Chatbox scrollbar's tracking
        parentChat.addEventListener('scroll', function(event){
          if (parentChat.scrollTop !== parentChat.scrollHeight - parentChat.clientHeight){
            outOfAutoScroll = true;
          } else {
            outOfAutoScroll = false;
          }
        });

        socket.emit('giveUserName', yourUserName);

        socket.addEventListener('updatePlayerList', function(data){
          playerList = data.playerList;
          instancesList = data.instancesList;
          socket.emit('nameInFrontUpdated', 'Name in front is ok');
        });

        socket.addEventListener('updateConnectedList', function(data){
          while (parentConnected.lastChild !== connected) {
              parentConnected.removeChild(parentConnected.lastChild);
          }
          while (parentMatches.lastChild !== matches) {
              parentMatches.removeChild(parentMatches.lastChild);
          }
          var sortedPlayerList = playerList.sort(function (a, b) {
            return a.name.localeCompare(b.name);
          });
          for (let i = 0; i < sortedPlayerList.length; i++) {
            var playerName = sortedPlayerList[i].name;
            var newTextP = document.createElement("p");
            var newTextA = document.createElement("A");
            var newContent = document.createTextNode(playerName);
            newTextA.appendChild(newContent);
            newTextP.appendChild(newTextA)
            parentConnected.insertBefore(newTextP, parentConnected.childNodes[parentConnected.childNodes.length]);
            parentConnected.lastChild.children[0].href = 'profil/' + playerName;
          }
          if (instancesList.length > 0) {
            for (let j = 0; j < instancesList.length; j++) {
              if (instancesList[j].active) {
                var player1Name = instancesList[j].player1Name;
                var player2Name = instancesList[j].player2Name;
                var newTextP = document.createElement("p");
                var newTextA1 = document.createElement("A");
                var newTextEt = document.createElement("A");
                var newTextA2 = document.createElement("A");
                var newContentA1 = document.createTextNode(player1Name);
                var newContentEt = document.createTextNode(' et ');
                var newContentA2 = document.createTextNode(player2Name);
                newTextA1.appendChild(newContentA1);
                newTextA1.appendChild(newContentEt);
                newTextA1.appendChild(newContentA2);
                newTextP.appendChild(newTextA1);
                newTextP.appendChild(newTextEt);
                newTextP.appendChild(newTextA2);
                parentMatches.insertBefore(newTextP, parentMatches.childNodes[parentMatches.childNodes.length]);
                parentMatches.lastChild.children[0].href = 'game/' + (j + 1);
              }
            }
          } else {
            var newTextP = document.createElement("p");
            var newContent = document.createTextNode('Aucune évasion en cours.');
            newTextP.appendChild(newContent);
            parentMatches.insertBefore(newTextP, parentMatches.childNodes[parentMatches.childNodes.length]);
          }
        });

        socket.addEventListener('updateFrontAvatarslots', function(data){
          avatarPlayer1.src = data.slot1.avatarSlot1;
          avatarPlayer2.src = data.slot2.avatarSlot2;
          slot1.text = data.slot1.name;
          slot2.text = data.slot2.name;
        });

        socket.addEventListener('userDisconnected', function(data){
          for (var i = 0; i < playerList.length; i++) {
            if (data.id === playerList[i].id) {
              playerList.splice(i, 1);
              i = playerList.length;
            }
            if (data.slot === 1) {
              avatarPlayer1.src = '/images/portraits/' + 'jail.jpg';
              slot1.text = 'vide';
            } else {
              avatarPlayer2.src = '/images/portraits/' + 'jail.jpg';
              slot2.text = 'vide';
            }
          }
          socket.emit('stopEvasionCountDown');
        });


        socket.emit('serverChatNeedTexts', 'Need chat texts please');

        // Tchat management
        tchatForm.addEventListener('submit', function (evt) {
          evt.preventDefault();
        });

        socket.addEventListener('serverGiveChatTexts', function(messageList){          
          for (let i = 0; i < messageList.length; i++) {
            var ArchivedMessage = messageList[i].author + ' : ' + messageList[i].message;
            var newTextP = document.createElement("p");
            var newContent = document.createTextNode(ArchivedMessage);
            newTextP.appendChild(newContent);
            parentChat.insertBefore(newTextP, parentChat.childNodes[parentChat.childNodes.length]);
          }

          var newTextP = document.createElement('p');
          var newContent = document.createTextNode('***** Bienvenu sur le tchat !{message} ! *****');
          newTextP.appendChild(newContent);
          parentChat.insertBefore(newTextP, parentChat.childNodes[parentChat.childNodes.length]);

          outOfAutoScroll = true;
          parentChat.scrollTop = parentChat.scrollHeight - parentChat.clientHeight;

          tchatForm.addEventListener('submit', function (evt) {
            var author = '!{message}';
            var textToGet = evt.srcElement[0].value;
            if (textToGet !== '') {
              socket.emit('chatTextSubmitted', {
                message: textToGet,
                author: author,
                date: Date.now()
              });
              document.getElementById('msg').value = '';
            }
          });
          

          socket.addEventListener('chatTextDispatched', function(data){
            console.log(data);
            var message = data.author + ' : ' + data.message;
            var newTextP = document.createElement("p");
            var newContent = document.createTextNode(message);
            newTextP.appendChild(newContent);
            parentChat.insertBefore(newTextP, parentChat.childNodes[parentChat.childNodes.length]);
            if (!outOfAutoScroll) {
              parentChat.scrollTop = parentChat.scrollHeight - parentChat.clientHeight;
            }
          });
        });

        // Join/quit antichamber
        antichamberEntrance.addEventListener('click', function (evt) {
          evt.preventDefault();
          socket.emit('antichamberChangeFront');
        });

        // Join
        socket.addEventListener('playerHasJoinedAntichamber', function(data){
          avatarPlayer1.src = '/images/portraits/' + data.slot1.image;
          avatarPlayer2.src = '/images/portraits/' + data.slot2.image;
          updateSlots(data.slot1);
          updateSlots(data.slot2);
          if (data.slot1.name === '!{message}') {
            avatarSelector1.style.visibility = "visible"; 
          } else if (data.slot2.name === '!{message}') {
            avatarSelector2.style.visibility = "visible"; 
          }
        });

        // Leave
        socket.addEventListener('userLeaveAntichamber', function(data){
          if (data.slot === 1) {
            avatarPlayer1.src = '/images/portraits/' + 'jail.jpg';
            slot1.text = 'vide';
            slot1.status = 'empty';
            avatarSelector1.style.visibility = "hidden";
          } else {
            avatarPlayer2.src = '/images/portraits/' + 'jail.jpg';
            slot2.text = 'vide';
            slot2.status = 'empty';
            avatarSelector2.style.visibility = "hidden"; 
          }
          socket.emit('stopEvasionCountDown');
        });

        // redirect to a game instance
        socket.addEventListener('redirectToGameInstance', function(data){
          if (yourUserName === data.player1 || yourUserName === data.player2) {
            window.location.href = data.url;
          }
        });

        // Update texts
        socket.addEventListener('updateAntichamberAdderText', function(newText){
          antichamberEntrance.textContent = newText;
        });

        socket.addEventListener('updateAntichamberStatusBack', function(newText){
          antichamberStatus.textContent = newText;
        });

        socket.addEventListener('updateEvasionCountDownBack', function(newText){
          evasionCountDown.textContent = newText;
          evasionCountDown.style.display = "initial"
        });

        socket.addEventListener('EvasionCountDownBackFinished', function(){
          evasionCountDown.textContent = '';
          evasionCountDown.style.display = "none";
        });

        // switch image onmouseover/mouseleave
        player1AvatarSelect.addEventListener('mouseover', function (evt) {
          player1AvatarSelect.src = "/images/icons/changeWhite.png"
        });

        player2AvatarSelect.addEventListener('mouseover', function (evt) {
          player2AvatarSelect.src = "/images/icons/changeWhite.png"
        });

        player1AvatarSelect.addEventListener('mouseleave', function (evt) {
          player1AvatarSelect.src = "/images/icons/change.png"
        });

        player2AvatarSelect.addEventListener('mouseleave', function (evt) {
          player2AvatarSelect.src = "/images/icons/change.png"
        });

        // switch avatar
        player1AvatarSelect.addEventListener('click', function (evt) {
          evt.preventDefault();
          socket.emit('switchAvatarSlot1');
        });

        player2AvatarSelect.addEventListener('click', function (evt) {
          evt.preventDefault();
          socket.emit('switchAvatarSlot2');
        });

        socket.addEventListener('switchAntichamberBack', function(data){
          if (data.slot === 'slot1') {
            avatarPlayer1.src = '/images/portraits/' + data.image;
          } else {
            avatarPlayer2.src = '/images/portraits/' + data.image;
          }
        });
      });
    });
  body
    include includes/navigation.pug
    div#lobbyContainer
      div#lobbySideLeft
        div#lobbyConnectedPlayers
          div#lobbyConnectedPlayersTexts
            h2
              | Prisonniers connectés
          div#connectedPlayers
            span#connectedChild
        div#lobbyCurrentMatches
          div#lobbyCurrentMatchesTexts
            h2
              | Evasions en cours
          div#currentMatches
            span#matchChild
      div#lobbyAntichamber
        div#antichamberHeader
          h2
            | Salle d'attente
          p
            | Lorsque deux prisonniers sont dans la salle d'attente ils peuvent tenter une évasion.
          button#AntichamberAdder(name='button') Rejoindre partie
        div#slotPlayers
          div#slotPlayer1
            p
              | joueur 1 : 
              a#player1InAntichamber
            input#player1AvatarSelect(type='image', src='/images/icons/change.png')
            img#avatarPlayer1(src='', alt='player 1 portrait' width=200 height= 200)
          div#slotPlayer2
            p
              | joueur 2 : 
              a#player2InAntichamber
            img#avatarPlayer2(src='', alt='player 2 portrait' width=200 height= 200)
            input#player2AvatarSelect(type='image', src='/images/icons/change.png')
          p#antichamberStatus
          p#evasionCountDown
      div#lobbyChat
        h2
          | Le réfectoire
        //- p
        //-   | C'est ici que les prisonniers profitent du déjeuner en compagnie des autres pour s'échanger des informations et organiser leurs fuites.
        div#chatBox
          span#chatChild
        form#tchatForm(action='/test', method='post')
          div
            label(for='msg') Message :
            input#msg(name='message', minlength='1', style='width:80%')
            input(type='submit', value='envoyer')
    include includes/footer.pug